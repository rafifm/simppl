{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/text-field.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js"],"names":["listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","CdkAutofill_Factory","ɵdir","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_document","_textareaElement","nativeElement","_measuringClass","FIREFOX","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","resizeToFitContent","window","_getWindow","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","_setMinHeight","_setMaxHeight","force","_cacheTextareaLineHeight","textarea","value","_minRows","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","_maxRows","reset","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","decorators","host","TextFieldModule","ɵmod","ɵinj","TextFieldModule_Factory","imports","ngJitMode","declarations","exports","MatTextareaAutosize","MatTextareaAutosize_Factory","ɵMatTextareaAutosize_BaseFactory","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","features","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","inputValueAccessor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","el","_isServer","_isNativeSelect","_isTextarea","multiple","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","options","focus","isFocused","readonly","_a","_b","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","ngDevMode","validity","badInput","ids","length","join","disabled","_id","_validateType","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","MatInput_Factory","hostVars","MatInput_HostBindings","MatInput_focus_HostBindingHandler","_focusChanged","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","required","errorState","toString","errorStateMatcher","userAriaDescribedBy","provide","useExisting","providers","MatInputModule","MatInputModule_Factory"],"mappings":"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","file":"default~layouts-akun-akun-module~layouts-default-default-module~modules-mhs-datamhs-module-es5.js","sourcesContent":["import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add(this._measuringClass);\n        textarea.placeholder = '';\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove(this._measuringClass);\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], \n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    let el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map"]}