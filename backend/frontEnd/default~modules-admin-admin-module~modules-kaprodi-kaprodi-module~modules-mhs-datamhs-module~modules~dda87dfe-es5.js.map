{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"names":["_c0","_c1","MatSelect_span_4_Template","rf","ctx","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","_getPanelTheme","_transformOrigin","_triggerFontSize","panelClass","multiple","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","type","selectors","features","useExisting","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_d","_e","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","_typeaheadDebounceInterval","typeaheadDebounceInterval","optionSelectionChanges","options","changes","pipe","map","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","_selectionModel","stateChanges","subscribe","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","_initializeSelection","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","fn","isDisabled","disabled","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","selected","onKeydown","selectedOption","announce","viewValue","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","overlayDir","positionChange","detectChanges","_positioningSettled","color","Promise","resolve","then","_setSelectionByValue","_value","setInactiveStyles","clear","Array","isArray","ngDevMode","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","isSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","empty","setFirstItemActive","length","labelId","_getLabelId","ariaLabelledby","getLabelId","isOpen","ids","_ariaDescribedby","join","_placeholder","newValue","_id","selectedOptions","reverse","isEmpty","_MatSelectBase_Factory","viewQuery","_MatSelectBase_Query","_t","trigger","first","inputs","required","compareWith","errorStateMatcher","outputs","ctorParameters","decorators","String","propDecorators","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","style","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect_Factory","ɵMatSelect_BaseFactory","ɵcmp","contentQueries","MatSelect_ContentQueries","dirIndex","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","toString","errorState","_getAriaActiveDescendant","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","MatSelect_Template_div_click_0_listener","toggle","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","directives","styles","encapsulation","data","animation","changeDetection","descendants","None","OnPush","host","animations","MatSelectModule","ɵmod","ɵinj","factory","MatSelectModule_Factory","imports","ngJitMode","declarations","exports"],"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","file":"default~modules-admin-admin-module~modules-kaprodi-kaprodi-module~modules-mhs-datamhs-module~modules~dda87dfe-es5.js","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/**\n * The max height of the select's overlay panel.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c, _d, _e;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. If not specified, the placeholder will be used as label. */\n        this.ariaLabel = '';\n        this._typeaheadDebounceInterval = (_e = (_d = this._defaultOptions) === null || _d === void 0 ? void 0 : _d.typeaheadDebounceInterval) !== null && _e !== void 0 ? _e : 0;\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (newValue !== this._value) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._getLabelId();\n        return this.ariaLabelledby ? labelId + ' ' + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the ID of the element that is labelling the select. */\n    _getLabelId() {\n        var _a;\n        return ((_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId()) || '';\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        let value = this._getLabelId() + ' ' + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this.overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return ɵMatSelect_BaseFactory(t || MatSelect); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\nconst ɵMatSelect_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSelect);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n            }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); }, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, _MatSelectBase, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map"]}